{"name":"fastStructure","tagline":"A variational framework for inferring population structure from SNP genotype data.","body":"# fastStructure\r\n\r\n*fastStructure* is a fast algorithm for inferring population structure from large SNP genotype data. It is based on a variational Bayesian framework for posterior inference and is written in Python2.x.\r\n\r\nThis repo contains a *vars* library with definitions and methods for the relevant variables, and a set of scripts to load the data and run the algorithm.\r\n\r\nThis document summarizes how to setup this software package, compile the C and Cython scripts and run the algorithm on a test simulated genotype dataset.\r\n\r\n## Parts \r\n\r\nThis repo has two components: a library of C and Cython scripts *vars* and a set of Cython and pure Python scripts to load the data and run the algorithm.\r\n\r\n## Dependencies\r\n\r\n*fastStructure* depends on \r\n+ [Numpy](http://www.numpy.org/)\r\n+ [Scipy](http://www.scipy.org/)\r\n+ [Cython](http://cython.org/)\r\n+ [GNU Scientific Library](http://www.gnu.org/software/gsl/)\r\n\r\nA number of python distributions already have the first three modules packaged in them. It is also\r\nstraightforward to install all these dependencies \r\n (1) using package managers for MACOSX and several Linux distributions,\r\n (2) from platform-specific binary packages, and\r\n (3) directly from source\r\n\r\n## Getting the source code\r\n\r\nTo obtain the source code from github, let us assume you want to clone this repo into a\r\ndirectory named `proj`:\r\n\r\n```\r\nmkdir ~/proj\r\ncd ~/proj\r\ngit clone https://github.com/rajanil/fastStructure\r\n```\r\n\r\nTo retrieve the latest code updates, you can do the following:\r\n\r\n```\r\ncd ~/proj/fastStructure\r\ngit fetch\r\ngit merge origin/master\r\n```\r\n\r\n## Building Python extensions\r\n\r\nTo build library extensions, you can do the following:\r\n\r\n```\r\ncd ~/proj/fastStructure/vars\r\npython setup.py build_ext --inplace\r\n```\r\n\r\nTo compile the main cython scripts, you can do the following:\r\n\r\n```\r\ncd ~/proj/fastStructure\r\npython setup.py build_ext --inplace\r\n```\r\n\r\nEach setup will create some .c and .so (shared object) files.\r\nThis setup may give some warnings, which are OK. If you get errors that indicate the \r\nbuild failed, this might be because the LD_LIBRARY_PATH, CFLAGS, LDFLAGS environment \r\nvariables are set incorrectly.\r\n\r\n## Executing the code\r\n\r\nThe main script you will need to execute is `structure.py`. To see command-line \r\noptions that need to be passed to the script, you can do the following:\r\n\r\n```\r\n    $ python structure.py\r\n\r\n    Here is how you can use this script\r\n\r\n    Usage: python structure.py\r\n         -K <int>\r\n         --input=<file>\r\n         --output=<file>\r\n         --tol=<float>   (default: 10e-6)\r\n         --prior={simple,logistic}   (default: simple)\r\n         --cv=<int>   (default: 0)\r\n         --full   (to output all variational parameters)\r\n         --seed=<int>\r\n```\r\n\r\nThe current implementation can import data from [plink bed](http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#bed) \r\nformat and the original Structure format. If the data are in plink format, ensure that\r\nbed, bim and fam files for the dataset are all present in the same path.\r\n\r\n### Main options\r\n\r\nThe key options to pass to the scripts are the input file, the output file and the number of populations.\r\nAssuming the input file is named `genotypes.bed` (with corresponding `genotypes.fam` and `genotypes.bim`),\r\nthe output file is named `genotypes_output` and the number of populations you would like is 3, \r\nyou can run the algorithm as follows:\r\n\r\n```\r\n    python structure.py -K 3 --input=genotypes --output=genotypes_output\r\n```\r\n\r\nThis generates a `genotypes_output.3.log` file that tracks how the algorithm proceeds, and files\r\n`genotypes_output.3.meanQ` and `genotypes_output.3.meanP` containing the posterior mean of\r\nadmixture proportions and allele frequencies, respectively. Note that input file names should\r\nnot include suffixes (e.g., .bed) and are relative to the main project directory (unless a full\r\npath is provided).\r\n\r\n## Running on test data\r\n\r\nA test simulated dataset is provided in `test/testdata.bed` with genotypes sampled for\r\n200 individuals at 500 SNP loci. The output files in `test/` were generated as follows:\r\n\r\n```\r\n    $ python structure.py -K 3 --input=test/testdata --output=testoutput_simple --full --seed=100\r\n    $ ls test/testoutput_simple*\r\n    test/testoutput_simple.3.log  test/testoutput_simple.3.meanP  test/testoutput_simple.3.meanQ  \r\n    test/testoutput_simple.3.varP  test/testoutput_simple.3.varQ\r\n\r\n    $ python structure.py -K 3 --input=test/testdata --output=testoutput_logistic --full --seed=100 --prior=logistic\r\n    $ ls test/testoutput_logistic*\r\n    test/testoutput_logistic.3.log    test/testoutput_logistic.3.meanQ  test/testoutput_logistic.3.varQ\r\n    test/testoutput_logistic.3.meanP  test/testoutput_logistic.3.varP\r\n```\r\n\r\nExecuting the code with the provided test data should generate a log file identical to the ones in `test/`, \r\nas a final check that the source code has been downloaded and compiled correctly.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}